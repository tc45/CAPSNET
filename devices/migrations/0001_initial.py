# Generated by Django 3.1.2 on 2020-10-20 16:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('appsettings', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ConnectionProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protocol_name', models.CharField(help_text='Device type (unique)', max_length=256, unique=True)),
                ('protocol_port', models.IntegerField(default=0, help_text='TCP/UDP port')),
                ('description', models.CharField(blank=True, default='', help_text='Short description', max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False, help_text='When created', null=True)),
                ('changed', models.DateTimeField(blank=True, editable=False, help_text='Last changed', null=True)),
                ('enable', models.BooleanField(default=True, help_text='Enable/Disable scanning of this device')),
                ('management_ip', models.GenericIPAddressField(default=None, help_text='Management IP', unique=True)),
                ('hostname', models.CharField(blank=True, default=None, help_text='Device HOSTNAME', max_length=256, null=True)),
                ('vendor', models.CharField(blank=True, help_text='Device vendor name', max_length=100)),
                ('model', models.CharField(blank=True, help_text='Device model name', max_length=100)),
                ('software', models.CharField(blank=True, help_text='Device software version', max_length=100)),
                ('notes', models.TextField(blank=True, default=None, help_text='Notes', null=True)),
                ('connection_protocol', models.ForeignKey(blank=True, default=None, help_text='Choose connection protocol/port', on_delete=django.db.models.deletion.PROTECT, to='devices.connectionprotocol')),
                ('credential', models.ForeignKey(blank=True, default=None, help_text='Choose authentication username', on_delete=django.db.models.deletion.PROTECT, to='appsettings.credential')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False, help_text='When created', null=True)),
                ('changed', models.DateTimeField(blank=True, editable=False, help_text='Last changed', null=True)),
                ('groupname', models.CharField(help_text='Device group name', max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(help_text='Device type (unique)', max_length=256, unique=True)),
                ('description', models.CharField(blank=True, default='', help_text='Short description', max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SeedDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False, help_text='When created', null=True)),
                ('changed', models.DateTimeField(blank=True, editable=False, help_text='Last changed', null=True)),
                ('enable', models.BooleanField(default=True, help_text='Enable/disable seeding of this device')),
                ('seed_host_or_ip', models.CharField(default=None, help_text='Enter IP or hostname to seed device', max_length=100, unique=True)),
                ('discovered', models.DateTimeField(blank=True, editable=False, help_text='Date discovered', null=True)),
                ('credential', models.ForeignKey(blank=True, default=None, help_text='Choose authentication username', null=True, on_delete=django.db.models.deletion.PROTECT, to='appsettings.credential')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('part_id', models.CharField(blank=True, help_text='Part number', max_length=100, null=True)),
                ('type', models.CharField(blank=True, help_text='Part type', max_length=100, null=True)),
                ('notes', models.CharField(blank=True, default=None, help_text='Notes', max_length=100, null=True)),
                ('device', models.ForeignKey(help_text='Device', on_delete=django.db.models.deletion.CASCADE, related_name='inventory_task', to='devices.device')),
            ],
        ),
        migrations.AddField(
            model_name='device',
            name='device_type',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='devices.devicetype'),
        ),
        migrations.AddField(
            model_name='device',
            name='groupname',
            field=models.ForeignKey(blank=True, default=None, help_text='Device group', null=True, on_delete=django.db.models.deletion.PROTECT, to='devices.devicegroups'),
        ),
    ]
